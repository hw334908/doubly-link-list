#include <iostream>
#include <cstdlib>

#include "List.h"
#include "Dnode.h"

using namespace std;


template <class T>

void List<T>::front_insert(const T& d)
{
	Dnode<T>* cursor;
	if(head == NULL)
	{
		cursor = new Dnode <T>;
		head = cursor;
		tail = cursor;
		cursor -> set_next(NULL);
		cursor -> set_prev(NULL);
		cursor -> set_data(d);
	}
	else
	{
		cursor = new Dnode<T>;
		cursor -> set_prev(NULL);
		head -> set_next(cursor);
		cursor -> set_next(head);
		head = cursor;
		cursor -> set_data(d);
	}
	
}

template <class T>
T List<T>:: get_head_data()
{
	return (head -> data());
	
}

template <class T>

void List<T>::rear_insert(const T& d)
{

	Dnode<T>* cursor;
	if(head == NULL)
	{
		cursor = new Dnode<T>;
		head = cursor;
		tail = cursor;
		cursor ->set_next(NULL);
		cursor ->set_prev(NULL);
		cursor ->set_data(d);
	}
	else
	{
		cursor = new Dnode<T>;
		cursor ->set_next(NULL);
		tail ->set_next(cursor);
		cursor ->set_prev(tail);
		tail = cursor;
		cursor ->set_data(d);
	}
}

template <class T>

T List<T>:: get_tail_data()
{
	return (tail -> data());
}

template <class T>

void List<T>::front_remove()
{
	if(head == NULL)
	{
		return;
	}
	else
	{
		Dnode<T> *remove;
		remove = head;
		head = head ->next_link();
		delete remove;
	}
}

template <class T>

void List<T>::rear_remove()
{
	if(head == NULL)
	{
		return;
	}
	else
	{
		Dnode<T> *remove;
		remove = tail;
		tail = tail -> prev_link();
		delete remove;
	}
}
